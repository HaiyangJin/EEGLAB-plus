function [timeWindowTable, zeroTable] = erp_timewindow(grandAvgTable, isPlot, ratioPeak, assumedWindow)
% grandAvg(table): the grand average of all of the epoch data (generated by
%                  erp_grandmean.m
% ratioPeak(numeric(0~1)): the percentage of the peak amplitude will be used to calculate
%                          the window size
% assumedTimeWindow(cell): the assumed time windows at the very beginning for
%                          each component. Each row is for one component
%                          and the first column are the names of the
%                          component, the second and the third columns are
%                          the assumed start and end time points (ms).

% This script aims to get the time window for the grand average data.
% Firstly, it select
% author: Haiyang Jin (hjin317@aucklanduni.ac.nz)

%% Default values
tempWindow = {'P1', 50, 150;
              'N170', 100, 250};
          
if nargin < 1
    error('Not enough inputs for erp_timewindow!');
elseif nargin < 2
    isPlot = 0;
    ratioPeak = 0.5;
    assumedWindow = tempWindow;
elseif nargin < 3
    ratioPeak = 0.5;
    assumedWindow = tempWindow;
elseif nargin < 4
    assumedWindow = tempWindow;
end

%% Get information from the grandAvg table
% Find where the data after onset of the simuli
orderP0 = find(ismember(grandAvgTable.Properties.VariableNames, 'P0'));
% isDataColumn = varfun(@isnumeric, grandAvg, 'output', 'uniform');
% nFrame = sum(isDataColumn);
% dataColumn = find(isDataColumn);
% dataColumn = dataColumn(1,1);
% the lag (ms) between two data points
lagFrame = str2double(grandAvgTable.Properties.VariableNames{orderP0 + 1}(2));
% srate = 1000 / lagFrame; % sample rate of the data

% frame point of the start and end of each window
assumedFrame = cellfun(@(c) round(c/lagFrame), assumedWindow(:,2:3));

%% Locate the frame of amplitude 0
nComp = size(grandAvgTable, 1);

% create cell for saving window size
zeroTrans = struct;

for iComp = 1:nComp
    thisComp = assumedWindow{iComp, 1};
    thisStart = assumedFrame(iComp, 1);
    thisEnd = assumedFrame(iComp, 2);
    
    isPositive = strcmp(thisComp(1), 'P');
    isNegative = strcmp(thisComp(1), 'N');
    
    nTrans = 0;
    
    for iFrame = thisStart:thisEnd
        tempAmp1 = grandAvgTable{iComp, orderP0 + iFrame};
        tempAmp2 = grandAvgTable{iComp, orderP0 + iFrame + 1};
        
        if tempAmp1 * tempAmp2 <= 0 % there is a change between positive and negative
            nTrans = nTrans + 1;
            
            if tempAmp1 < 0 && tempAmp2 > 0  % from negative to positive
                switch nTrans
                    case 1
                        if isPositive
                            theCompStart = iFrame + 1;
                        elseif isNegative
                            nTrans = 0;
                        end
                    case 2
                        theCompEnd = iFrame;
                end
            elseif tempAmp1 > 0 && tempAmp2 < 0 % from positive to negative
                switch nTrans
                    case 1
                        if isPositive && iFrame < (90/lagFrame)
                            nTrans = 0;
                        elseif isPositive && iFrame >= (90/lagFrame)
                            theCompStart = thisStart;
                            warning(['Please check manully! The start of P1 '...
                                'time window was set as the assumed start point']);
                        else
                            theCompStart = iFrame + 1;
                        end
                    case 2
                        theCompEnd = iFrame;
                end
            end
        end
        if nTrans == 2; break; end
    end
    
    if nTrans == 1 && isPositive
        theCompEnd = thisEnd;
        warning(['Please check manully! The end of P1 '...
            'time window was set as the assumed start point']);
    elseif nTrans == 1 && isNegative
        theCompEnd = thisEnd;
        warning(['Please check manully! The end of N1 '...
            'time window was set as the assumed start point']);
    end
    % save the time window data
    zeroTrans(iComp).Component = thisComp;
    zeroTrans(iComp).windowStart = theCompStart;
    zeroTrans(iComp).windowEnd = theCompEnd;
    zeroTrans(iComp).nTrans = nTrans;
        
end

zeroTable = struct2table(zeroTrans);

%% calculate the window size
% get the maximum amplitude in the frame time window and locate the latency
% for half (or specified by user). Save it as the time window for further 
% analysis
timeWindowStr = struct;
grandAvgPosi = grandAvgTable(:, orderP0 + 1: end);

for iComp = 1:nComp
    
    thisComp = zeroTable{iComp, 1};
    isPositive = strcmp(thisComp{1}(1), 'P');
    isNegative = strcmp(thisComp{1}(1), 'N');
    
    thisCheckStart = zeroTable{iComp, 'windowStart'};
    thisCheckEnd = zeroTable{iComp, 'windowEnd'};
    thisGrandAvg = grandAvgPosi{iComp, thisCheckStart : thisCheckEnd};
    
    if isPositive
        [peak, peakFrame] = max(thisGrandAvg);
    elseif isNegative
        [peak, peakFrame] = min(thisGrandAvg);
    end
    refAmp = ratioPeak * peak;
    
    for iFrame = thisCheckStart : thisCheckEnd
        tempAmp1 = grandAvgPosi{iComp, iFrame};
        tempAmp2 = grandAvgPosi{iComp, iFrame + 1};
        
        if tempAmp1 <= refAmp && refAmp <= tempAmp2
            if isPositive; startFrame = iFrame; end
            if isNegative; endFrame = iFrame + 1; end
        elseif tempAmp1 >= refAmp && refAmp >= tempAmp2
            if isPositive; endFrame = iFrame + 1; end
            if isNegative; startFrame = iFrame; end
        end
        
    end
    
    timeWindowStr(iComp).Component = thisComp;
    timeWindowStr(iComp).StartFrame = startFrame;
    timeWindowStr(iComp).EndFrame = endFrame;
    timeWindowStr(iComp).StartTime = startFrame * lagFrame;
    timeWindowStr(iComp).EndTime = endFrame * lagFrame;
    timeWindowStr(iComp).MaxAmplitude = peak;
    timeWindowStr(iComp).MaxFrame = thisCheckStart + peakFrame - 1;
    timeWindowStr(iComp).MaxTime = timeWindowStr(iComp).MaxFrame * lagFrame;
    timeWindowStr(iComp).LeftChantrodes = grandAvgTable{iComp, 'LeftChantrodes'};
    timeWindowStr(iComp).RightChantrodes = grandAvgTable{iComp, 'RightChantrodes'};
    timeWindowStr(iComp).RatioForPeak = ratioPeak;
    timeWindowStr(iComp).nTrans = zeroTrans(iComp).nTrans;
    
end

timeWindowTable = struct2table(timeWindowStr);

if isPlot
    % Plot the grand average of the data for this component
    % Mark the time window
    plot([0:4:996], [grandAvgTable{iComp, orderP0:end};zeros(length([0:4:996])) ]);
end

end