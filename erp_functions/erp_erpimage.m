function [outputFig, clusterTrialTable, isNoData] = erp_erpimage(trialTable, chanCent, plotWindow, event, acc, subj, imageTitle, isCluster)
% trialTable(table): Generated by eeg_trialdata. First several columns are
%                    the information (independent variable) abou the trials
%                    and the rest columns are the trial data. Each row is 
%                    for one participant, one chanel, and one condition (bin).
% channel(numeric): The channels are used to plot the data
% erpwindow(num): Define the time window you want to plot. it should
%                 includes two integers (points), which are the start and
%                 the end of the window. (The default is the whole window).
% event(cell): The event(s) are used to plot the data. (The default is all
%              the events.
% acc(num): Do you want to plot the correct or incorrect trials if you 
%           include the accuracy data? (The default is plot both).
% subj(cell): The sujbect codes that you want to plot. (The default is all).

% plot the erp image and output the data used.

%% Defalut values
if nargin < 2
    error('Not enough inputs for eeg_erpimage!');
end
if nargin < 3
    plotWindow = []; 
end
if nargin < 4
    event = [];
end
if nargin < 5
    acc = [];   
end
if nargin < 6
    subj = [];
end
if imageTitle < 7
    imageTitle = 'ERP-image';
end
if nargin < 8
    isCluster = 1;
end

% load channel variables for cluster
chanCent = channame(chanCent);
if isCluster
    chanName = clusterchan(chanCent);
else
    chanName = chanCent;
end

%% Select the data to be displayed
% which of the conditions will be shown?
isClusterChan = ismember(trialTable.Channel, chanName);
nX = size(trialTable, 1);
if isempty(event), isEvent = ones(nX, 1); else; isEvent = ismember(trialTable.Event, event); end
if isempty(acc), isAcc = ones(nX, 1); else; isAcc = ismember(trialTable.Response, acc); end
if isempty(subj), isSubj = ones(nX, 1); else; isSubj = ismember(trialTable.Subjcode, subj); end
isXCluster = logical(isClusterChan .* isEvent .* isAcc .* isSubj);

isNoData = ~any(isXCluster);
if isNoData
   warning(sprintf(['There are no trials in the currect condition! \n' ...
       'Event: ' event ' \n' ...
       'Response: ' acc ' \n' ...
       'SubjCode: ' subj ' \n'])); %#ok<SPWRN>
   
   outputFig = [];
   clusterTrialTable = [];
   
   return;
end

% time window for display
[~, isDataColu, lagFrame] = xposition(trialTable.Properties.VariableNames);

dataTable = trialTable(isXCluster, isDataColu);
dataVarNames = dataTable.Properties.VariableNames;
nPoint = length(dataVarNames);

isYData = zeros(1, nPoint);
if isempty(plotWindow)
%     isWindow = [1, nPoint];
    plotWindow = [-str2double(dataVarNames{1}(2:end)), str2double(dataVarNames{nPoint}(2:end))];
  
%     isWindow = zeros(1, 2);
%     
%     
%     for iW = 1:2
%         thisPoint = plotwindow(iW);
%         if thisPoint < 0
%             tempPoint = ['N', num2str(abs(thisPoint))];
%         elseif thisPoint >= 0
%             tempPoint = ['P', num2str(abs(thisPoint))];
%         end
%         isWindow(iW) = find(ismember(pointNames, tempPoint));
%     end
end
windowStart = xposition(dataVarNames, plotWindow(1));
windowEnd =  xposition(dataVarNames, plotWindow(2));
    
isYData(windowStart:windowEnd) = 1;

% calculate the mean for the cluster
nTrial = sum(isXCluster)/length(chanName);
groupNum = repmat(1:nTrial, length(chanName), 1);

G = findgroups(groupNum(:));
dataCluster = splitapply(@mean, dataTable{:,:}, G);

data = dataCluster(:, logical(isYData));


%% input for erp image
% sort variable
isCenChan = ismember(trialTable.Channel, chanCent);
sortVar = trialTable{logical(isCenChan .* isEvent .* isAcc .* isSubj), 'RT'}';

xAxis = plotWindow(1):lagFrame:plotWindow(2);

smooth = 10;
downsampling = 1;
colorLimit = [-6 6];

outputFig = figure; 

if sum(isXCluster) > 10
    erpimage(data', sortVar, xAxis, imageTitle, smooth, downsampling, 'cbar','on','caxis', colorLimit);
end


%% Output the cluster data for every trial
IVs = trialTable(logical(isCenChan .* isEvent .* isAcc .* isSubj), {'SubjCode', 'Event', 'Block'});
IVs.ChanCent = repmat(chanCent, size(IVs, 1), 1);
IVs.ChanCluster = repmat(chanName, size(IVs, 1), 1);
IVs.RT = sortVar';
DVs = array2table(data, 'VariableNames', dataVarNames(logical(isYData)));

clusterTrialTable = [IVs, DVs];

end

