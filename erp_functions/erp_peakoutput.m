function peakOutTable = erp_peakoutput(rawEpochTable, timeWindowTable, isTrialPeak, isFaceSpec)
% rawEpoch(table): The raw epoch data should be a table which includes
%                      the information of the subjectCode, experimental 
%                      independent variables, the channel names, and the 
%                      epoch data. The variable names for the data should 
%                      be like N500, P0, P999 etc...
% timeWindowTable(table): A table for the time window information.
%                         Generated by erp_timewindow function.
% isTrialPeak(logicl): Whether calculate the peak value for each trial. The
%                      defaul is 0 (no).

% This script aims to calculate the peak amplitude for each sujbect, each 
% channel cluster, each condition each hemisphere and even for each trial. 
% Author: Haiyang Jin (hjin317@aucklanduni.ac.nz)

%% Default values
if nargin < 2
    error('Not enough inputs for erp_avgpeakoutput!');
elseif nargin < 3
    isTrialPeak = 0;
    isFaceSpec = 0;
elseif nargin < 4
    isFaceSpec = 0;
end

%% Get information from rawEpoch and timeWindowTable
orderP0 = find(ismember(rawEpochTable.Properties.VariableNames, {'P0'}));
rawEpochPosi = rawEpochTable(:, orderP0 + 1: end);
isDataColumn = varfun(@isnumeric, rawEpochTable, 'output', 'uniform');

nComp = size(timeWindowTable, 1);

LeftRight = {'Left', 'Right'};

%% calculate the peak values for each channel, participant, condition (across the trials)
trialPeakTable = rawEpochTable(:, ~isDataColumn);

for iComp = 1: nComp
    thisComp = timeWindowTable{iComp, 'Component'}{1};
    
    % window for this component
    thisWindowStart = timeWindowTable{iComp, 'StartFrame'};
    thisWindowEnd = timeWindowTable{iComp, 'EndFrame'};
    
    % data for this window
    thisCompData = rawEpochPosi{:, thisWindowStart : thisWindowEnd};
    
    % mean data of this window
    thisCompPeak = mean(thisCompData, 2);

    trialPeakTable.(thisComp) = thisCompPeak;
end

if isTrialPeak
    peakOutTable = trialPeakTable;
    return
end



%% calculate the average peak for clusters
for iComp = 1:nComp
    thisComp = timeWindowTable{iComp, 'Component'}{1};

    for iLR = 1:2 % calculate the peak for left and right hemisphere separately
        LR = LeftRight{iLR};
        LRChan = [LR, 'Channels'];
        theClusterChan = timeWindowTable.(LRChan)(iComp, :);
      
        isClusterChan = ismember(trialPeakTable.Channel, theClusterChan);
        dataCluster = trialPeakTable(isClusterChan, :);
        
        % split the data into serveral groups and calculate the group mean
        if isFaceSpec
            [G, SubjCode, Event] = findgroups(dataCluster.SubjCode, dataCluster.Event, dataCluster.Channel);
        else
            [G, SubjCode, Event] = findgroups(dataCluster.SubjCode, dataCluster.Event);
        end
        Amplitude = splitapply(@mean, dataCluster.(thisComp), G);
        if isFaceSpec
            eventLR = Event;
            CentralChan = repmat(theClusterChan', length(Amplitude)/length(theClusterChan), 1);
        else
            eventLR = cellfun(@(c) [LR(1), c], Event, 'UniformOutput', false);
            CentralChan = repmat(theClusterChan{1,1}, length(Amplitude), 1);
        end
        LRtable = repmat({LR}, length(Amplitude), 1);
        Component = repmat({thisComp}, length(Amplitude), 1);
        
        % create the table 
        thisPeakOut = table(SubjCode, Component, CentralChan, eventLR, LRtable, Amplitude);
%         thisPeakOut.Properties.VariableNames{'CentralChan'} = [thisComp '_CentralChan'];
%         thisPeakOut.Properties.VariableNames{'thisMeanPeak'} = thisComp;
        
        if iLR == 1
            % save the output data for left hemisphere
            LPeakOut = thisPeakOut;
        elseif iLR ==2
            % save the output data for this component
            thisCompPeakOut = vertcat(LPeakOut, thisPeakOut);
        end
        
    end
    
    if iComp == 1
        compPeakOut = thisCompPeakOut;
    else
        compPeakOut = vertcat(compPeakOut, thisCompPeakOut); %#ok<AGROW>
    end
end

if isFaceSpec
    % only keep the face related amplitude in trial data
    isFaceTrial = cellfun(@(x) strcmp(x(1:2), 'NF'), trialPeakTable{:, 'Event'});
    faceTrialTable = trialPeakTable(isFaceTrial, :);
    
    faceSpecTable = faceTrialTable;
    faceSpecTable(:, 'P1') = {NaN};
    faceSpecTable(:, 'N170') = {NaN};
    
    subjs = unique(faceTrialTable{:, 'SubjCode'});
    events = unique(faceTrialTable{:, 'Event'});
    
    for iSubj = 1:length(subjs)
        thisSubj = subjs(iSubj);
        
        for iEvent = 1:length(events)
            thisEvent = events(iEvent);
            
            for iComp = 1:nComp
                thisComp = timeWindowTable{iComp, 'Component'}{1};
                
                chans = [timeWindowTable{iComp, 'LeftChannels'}, ...
                    timeWindowTable{iComp, 'RightChannels'}];
                
                for iChan = 1:length(chans)
                    thisChan = chans(iChan);
                        
                    % the face trial table for this condition
                    isTheFaceTrial = logical(strcmp(faceTrialTable{:, {'Channel'}}, thisChan) .* ...
                        strcmp(faceTrialTable{:, {'SubjCode'}}, thisSubj) .* ...
                        strcmp(faceTrialTable{:, {'Event'}}, thisEvent));
                    theFaceTrial = faceTrialTable{isTheFaceTrial, thisComp};
                    
                    % the house averaged trial for this condition
                    isTheHouseTrial = logical(strcmp(compPeakOut.CentralChan, thisChan) .* ...
                        strcmp(compPeakOut{:, {'SubjCode'}}, thisSubj) .* ...
                        strcmp(compPeakOut{:, {'Component'}}, thisComp) .* ...
                        strcmp(compPeakOut{:, {'eventLR'}}, strrep(thisEvent, 'F', 'H')));
                    theHouseTrial = compPeakOut{isTheHouseTrial, 'Amplitude'};
                    
                    % face specific amplitude trials
                    theFaceSpec = theFaceTrial - theHouseTrial;
                    faceSpecTable(isTheFaceTrial, thisComp) = num2cell(theFaceSpec);

                end
            end
        end
    end
    
    faceSpecTable = faceSpecTable(~isnan(faceSpecTable.P1), :);
    
end

if isFaceSpec
    peakOutTable = faceSpecTable;
else
    peakOutTable = compPeakOut;
end


end